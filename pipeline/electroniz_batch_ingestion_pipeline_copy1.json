{
	"name": "electroniz_batch_ingestion_pipeline_copy1",
	"properties": {
		"description": "his pipeline will ingest data from sales \ndatabase, currency conversion, geo-location, and \necommerce website tracking",
		"activities": [
			{
				"name": "Find SalesDB Tables",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT QUOTENAME(table_schema) + '.' + QUOTENAME(table_name) AS Table_Name\nFROM information_schema.tables\nWHERE table_name NOT IN ('watermarktable', 'database_firewall_rules');\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sqldatabase",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Find SalesDB Tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Find SalesDB Tables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookup Old Watermark",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM [dbo].[watermarktable] AS \nWatermarkValue WHERE table_name='@{item().Table_Name}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sqldatabase",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Lookup new watermarkvalue",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "SELECT MAX(updated_at) as NewWatermarkvalue FROM @{item().Table_Name}",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "sqldatabase",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Lookup new watermarkvalue",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set variable2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM @{item().Table_Name} WHERE updated_at > '@{activity('Lookup Old Watermark').output.firstRow.watermark_value}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "sqldatabase",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "SalesDelimitedText",
									"type": "DatasetReference",
									"parameters": {
										"FileExt": "csv",
										"FileTime": {
											"value": "@{formatDateTime(pipeline().TriggerTime, 'yyyyMMddHHmmss')}",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Update Watermark",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy data1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[usp_write_watermark]",
								"storedProcedureParameters": {
									"LastModifiedtime ": {
										"value": {
											"value": "@{activity('Lookup new watermarkvalue').output.firstRow.\nNewWatermarkvalue}",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"TableName": {
										"value": {
											"value": "@{activity('Lookup Old Watermark').output.firstRow.table_name}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set variable2",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Lookup Old Watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "table_name",
								"value": {
									"value": "split(replace(replace(@{activity('Lookup Old Watermark').output.firstRow.table_name}, '[', ''), ']', ''), '.')[1]\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Find Currencies",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ForEachTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT DISTINCT currency FROM [dbo].[store_orders] \nWHERE currency <> 'USD'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "sqldatabase",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "For Each Currency",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Find Currencies",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Find Currencies').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Currency Value",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "RestResource1",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "CurrencyDelimitedText",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "Copy Website Tracking Data",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "For Each Currency",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "TrackingJSON",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Json1",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Delete Website Tracking Logs",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Copy Website Tracking Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "TrackingJSON",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			}
		],
		"variables": {
			"table_name": {
				"type": "String"
			}
		},
		"annotations": []
	}
}